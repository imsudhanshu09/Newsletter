#3324 
    - I Went to bootstrap and then to bootstrap examples and then clicked on the signin form under custom snippets section
    - Then Right clicked > View page source > and then copied the code and saved in my vs code editor by name signup.html.
    - This copied code has no cdn so add the bootstrap cdn and add js script cdn just above the body end tag.
    - This file also has css both external and internal so copy internal css and paste it into the styles.css.
    - Now go to the bootstrap examples page where you copied the code by "view page source" then click on the dependable links like styles.css and svgs etc. and copy css/download svg under assets folder.
    - Now link the files in the signup.html and run the file and voila you just made the page exactly like the one displayed on the bootstrap examples page with almost lesser effort.

#3325
    - Well, express server can send the requests based on the paths/routes (app.get,app.post etc) we wrote in app.js by using the res.sendFile() function.
    - This res.sendFile function can fetch the links (<link href="xyz">) which are present on cdn/over the internet. But, the express can't fetch the static(style.css, icon.svg etc) files [static files means the files which just can be linked to the html file and these files do not change once we written them, we don't interact with them we only interact with the html file]
    - so, to link the static files we need to use the special express function called 
                - (app.use(express.static("static_folder_name")));
    - And whatever the files we place in that folder all that files will be linked with the html file correctly via express server.

#3326
    - while linking the static files in the html files remember to imagine that you are already in the public folder and just link styles.css in link tag if the css file is just inside the public folder.

#3327
    - while deploying our app to heroku we can use the dev-center.heroku.com to follow the deployment step by step.
    - also you need to install heroku cli on your machine and login to it using the heroku login.
    - and you need to create a Procfile which has the commands which are executed when our app is run on heroku server. This file does'nt have any extension.
    